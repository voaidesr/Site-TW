{"mappings":"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","sources":["<anon>","src/scripts/celestial.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function() {\n    const canvas = document.getElementById(\"celestialSphere\");\n    const ctx = canvas.getContext(\"2d\");\n    // ajustezi canvas ca sa ai aspect ratio bun\n    function resizeCanvas() {\n        const w = canvas.offsetWidth;\n        const h = canvas.offsetHeight;\n        canvas.width = w * window.devicePixelRatio;\n        canvas.height = h * window.devicePixelRatio;\n        ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n    }\n    function resizeAndRedraw() {\n        resizeCanvas();\n        drawAll();\n    }\n    resizeCanvas();\n    window.addEventListener(\"resize\", resizeAndRedraw);\n    // slider pt ascensiune si declinatie\n    const raSlider = document.getElementById(\"raSlider\");\n    const decSlider = document.getElementById(\"decSlider\");\n    const raVal = document.getElementById(\"raValue\");\n    const decVal = document.getElementById(\"decValue\");\n    raSlider.addEventListener(\"input\", drawAll);\n    decSlider.addEventListener(\"input\", drawAll);\n    const R = 200; // raza sferei\n    // camera spre +z\n    const camera = {\n        x: 0,\n        y: 0,\n        z: -600\n    };\n    const focalLength = 400;\n    function getCenter() {\n        return {\n            x: canvas.width / (2 * window.devicePixelRatio),\n            y: canvas.height / (2 * window.devicePixelRatio)\n        };\n    }\n    // grade in radiani\n    function degToRad(d) {\n        return d * Math.PI / 180;\n    }\n    function sphereCoord(raDeg, decDeg) {\n        const ra = degToRad(raDeg);\n        const dec = degToRad(decDeg);\n        const x = R * Math.cos(dec) * Math.cos(ra);\n        const y = R * Math.cos(dec) * Math.sin(ra);\n        const z = R * Math.sin(dec);\n        return {\n            x,\n            y,\n            z\n        };\n    }\n    function rotateX(point, angleDeg) {\n        const angle = degToRad(angleDeg);\n        const { x, y, z } = point;\n        const cosA = Math.cos(angle);\n        const sinA = Math.sin(angle);\n        return {\n            x: x,\n            y: y * cosA - z * sinA,\n            z: y * sinA + z * cosA\n        };\n    }\n    function rotateY(point, angleDeg) {\n        const angle = degToRad(angleDeg);\n        const { x, y, z } = point;\n        const cosA = Math.cos(angle);\n        const sinA = Math.sin(angle);\n        return {\n            x: x * cosA + z * sinA,\n            y: y,\n            z: -x * sinA + z * cosA\n        };\n    }\n    // vantage point\n    function tiltForVantage(pt) {\n        let out = rotateX(pt, 70); // valori random, ce arata mai bine\n        out = rotateY(out, -20);\n        return out;\n    }\n    function project3DTo2D(point) {\n        const { x, y, z } = point;\n        const dx = x - camera.x;\n        const dy = y - camera.y;\n        const dz = z - camera.z;\n        const factor = focalLength / (dz > 1 ? dz : 1);\n        const center = getCenter();\n        const X = center.x + dx * factor;\n        const Y = center.y - dy * factor;\n        return {\n            X,\n            Y\n        };\n    }\n    function drawLine3D(points, color, width = 1) {\n        ctx.beginPath();\n        for(let i = 0; i < points.length; i++){\n            const p2d = project3DTo2D(points[i]);\n            if (i === 0) ctx.moveTo(p2d.X, p2d.Y);\n            else ctx.lineTo(p2d.X, p2d.Y);\n        }\n        ctx.strokeStyle = color;\n        ctx.lineWidth = width;\n        ctx.stroke();\n    }\n    function drawCelestialGrid() {\n        // linii de aceeasi declinatie\n        for(let dec = -75; dec <= 75; dec += 15){\n            const linePoints = [];\n            for(let ra = 0; ra <= 360; ra += 5)linePoints.push(sphereCoord(ra, dec));\n            const rotatedLine = linePoints.map(tiltForVantage);\n            drawLine3D(rotatedLine, \"#888\", 1);\n        }\n        // linii de aceeasi ascensie\n        for(let ra = 0; ra < 360; ra += 15){\n            const linePoints = [];\n            for(let dec = -90; dec <= 90; dec += 5)linePoints.push(sphereCoord(ra, dec));\n            const rotatedLine = linePoints.map(tiltForVantage);\n            drawLine3D(rotatedLine, \"#888\", 1);\n        }\n    }\n    function drawEquator() {\n        const eqPoints = [];\n        for(let ra = 0; ra <= 360; ra += 5)eqPoints.push(sphereCoord(ra, 0));\n        const rotated = eqPoints.map(tiltForVantage);\n        drawLine3D(rotated, \"green\", 2);\n    }\n    // ecliptica\n    function drawEcliptic() {\n        const eclPoints = [];\n        for(let ra = 0; ra <= 360; ra += 5){\n            const p = sphereCoord(ra, 0);\n            const pEcl = rotateX(p, 23.4); // inclinatie de 23.4 deg fata de eq\n            const pFinal = tiltForVantage(pEcl);\n            eclPoints.push(pFinal);\n        }\n        drawLine3D(eclPoints, \"red\", 2);\n    }\n    // stea\n    function drawStar() {\n        const ra = parseFloat(raSlider.value);\n        const dec = parseFloat(decSlider.value);\n        raVal.textContent = ra + \"\\xb0\";\n        decVal.textContent = dec + \"\\xb0\";\n        let p = sphereCoord(ra, dec);\n        p = tiltForVantage(p);\n        // proiecteaza in 2d\n        const star2D = project3DTo2D(p);\n        ctx.beginPath();\n        ctx.arc(star2D.X, star2D.Y, 5, 0, 2 * Math.PI);\n        ctx.fillStyle = \"gold\";\n        ctx.fill();\n    }\n    function drawAll() {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        drawCelestialGrid();\n        drawEquator();\n        drawEcliptic();\n        drawStar();\n    }\n    drawAll();\n});\n\n//# sourceMappingURL=celestialsphere.2d94ceaf.js.map\n","document.addEventListener(\"DOMContentLoaded\", function () {\r\n  const canvas = document.getElementById(\"celestialSphere\");\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  // ajustezi canvas ca sa ai aspect ratio bun\r\n  function resizeCanvas() {\r\n    const w = canvas.offsetWidth;\r\n    const h = canvas.offsetHeight;\r\n    canvas.width = w * window.devicePixelRatio;\r\n    canvas.height = h * window.devicePixelRatio;\r\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\r\n  }\r\n\r\n  function resizeAndRedraw() {\r\n    resizeCanvas();\r\n    drawAll();\r\n  }\r\n\r\n  resizeCanvas();\r\n  window.addEventListener(\"resize\", resizeAndRedraw);\r\n\r\n  // slider pt ascensiune si declinatie\r\n  const raSlider = document.getElementById(\"raSlider\");\r\n  const decSlider = document.getElementById(\"decSlider\");\r\n  const raVal = document.getElementById(\"raValue\");\r\n  const decVal = document.getElementById(\"decValue\");\r\n  raSlider.addEventListener(\"input\", drawAll);\r\n  decSlider.addEventListener(\"input\", drawAll);\r\n\r\n  const R = 200; // raza sferei\r\n  // camera spre +z\r\n  const camera = { x: 0, y: 0, z: -600 };\r\n  const focalLength = 400;\r\n\r\n  function getCenter() {\r\n    return {\r\n      x: canvas.width / (2 * window.devicePixelRatio),\r\n      y: canvas.height / (2 * window.devicePixelRatio),\r\n    };\r\n  }\r\n\r\n  // grade in radiani\r\n  function degToRad(d) {\r\n    return (d * Math.PI) / 180;\r\n  }\r\n\r\n  function sphereCoord(raDeg, decDeg) {\r\n    const ra = degToRad(raDeg);\r\n    const dec = degToRad(decDeg);\r\n    const x = R * Math.cos(dec) * Math.cos(ra);\r\n    const y = R * Math.cos(dec) * Math.sin(ra);\r\n    const z = R * Math.sin(dec);\r\n    return { x, y, z };\r\n  }\r\n\r\n  function rotateX(point, angleDeg) {\r\n    const angle = degToRad(angleDeg);\r\n    const { x, y, z } = point;\r\n    const cosA = Math.cos(angle);\r\n    const sinA = Math.sin(angle);\r\n    return {\r\n      x: x,\r\n      y: y * cosA - z * sinA,\r\n      z: y * sinA + z * cosA,\r\n    };\r\n  }\r\n\r\n  function rotateY(point, angleDeg) {\r\n    const angle = degToRad(angleDeg);\r\n    const { x, y, z } = point;\r\n    const cosA = Math.cos(angle);\r\n    const sinA = Math.sin(angle);\r\n    return {\r\n      x: x * cosA + z * sinA,\r\n      y: y,\r\n      z: -x * sinA + z * cosA,\r\n    };\r\n  }\r\n\r\n  // vantage point\r\n  function tiltForVantage(pt) {\r\n    let out = rotateX(pt, 70); // valori random, ce arata mai bine\r\n    out = rotateY(out, -20);\r\n    return out;\r\n  }\r\n\r\n  function project3DTo2D(point) {\r\n    const { x, y, z } = point;\r\n    const dx = x - camera.x;\r\n    const dy = y - camera.y;\r\n    const dz = z - camera.z;\r\n\r\n    const factor = focalLength / (dz > 1 ? dz : 1);\r\n\r\n    const center = getCenter();\r\n    const X = center.x + dx * factor;\r\n    const Y = center.y - dy * factor;\r\n    return { X, Y };\r\n  }\r\n\r\n  function drawLine3D(points, color, width = 1) {\r\n    ctx.beginPath();\r\n    for (let i = 0; i < points.length; i++) {\r\n      const p2d = project3DTo2D(points[i]);\r\n      if (i === 0) {\r\n        ctx.moveTo(p2d.X, p2d.Y);\r\n      } else {\r\n        ctx.lineTo(p2d.X, p2d.Y);\r\n      }\r\n    }\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = width;\r\n    ctx.stroke();\r\n  }\r\n\r\n  function drawCelestialGrid() {\r\n    // linii de aceeasi declinatie\r\n    for (let dec = -75; dec <= 75; dec += 15) {\r\n      const linePoints = [];\r\n      for (let ra = 0; ra <= 360; ra += 5) {\r\n        linePoints.push(sphereCoord(ra, dec));\r\n      }\r\n      const rotatedLine = linePoints.map(tiltForVantage);\r\n      drawLine3D(rotatedLine, \"#888\", 1);\r\n    }\r\n\r\n    // linii de aceeasi ascensie\r\n    for (let ra = 0; ra < 360; ra += 15) {\r\n      const linePoints = [];\r\n      for (let dec = -90; dec <= 90; dec += 5) {\r\n        linePoints.push(sphereCoord(ra, dec));\r\n      }\r\n      const rotatedLine = linePoints.map(tiltForVantage);\r\n      drawLine3D(rotatedLine, \"#888\", 1);\r\n    }\r\n  }\r\n\r\n  function drawEquator() {\r\n    const eqPoints = [];\r\n    for (let ra = 0; ra <= 360; ra += 5) {\r\n      eqPoints.push(sphereCoord(ra, 0));\r\n    }\r\n    const rotated = eqPoints.map(tiltForVantage);\r\n    drawLine3D(rotated, \"green\", 2);\r\n  }\r\n\r\n  // ecliptica\r\n  function drawEcliptic() {\r\n    const eclPoints = [];\r\n    for (let ra = 0; ra <= 360; ra += 5) {\r\n      const p = sphereCoord(ra, 0);\r\n      const pEcl = rotateX(p, 23.4); // inclinatie de 23.4 deg fata de eq\r\n      const pFinal = tiltForVantage(pEcl);\r\n      eclPoints.push(pFinal);\r\n    }\r\n    drawLine3D(eclPoints, \"red\", 2);\r\n  }\r\n\r\n  // stea\r\n  function drawStar() {\r\n    const ra = parseFloat(raSlider.value);\r\n    const dec = parseFloat(decSlider.value);\r\n    raVal.textContent = ra + \"°\";\r\n    decVal.textContent = dec + \"°\";\r\n\r\n    let p = sphereCoord(ra, dec);\r\n    p = tiltForVantage(p);\r\n\r\n    // proiecteaza in 2d\r\n    const star2D = project3DTo2D(p);\r\n    ctx.beginPath();\r\n    ctx.arc(star2D.X, star2D.Y, 5, 0, 2 * Math.PI);\r\n    ctx.fillStyle = \"gold\";\r\n    ctx.fill();\r\n  }\r\n\r\n  function drawAll() {\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    drawCelestialGrid();\r\n    drawEquator();\r\n    drawEcliptic();\r\n    drawStar();\r\n  }\r\n\r\n  drawAll();\r\n});\r\n"],"names":["document","addEventListener","canvas","getElementById","ctx","getContext","resizeCanvas","w","offsetWidth","h","offsetHeight","width","window","devicePixelRatio","height","scale","drawAll","raSlider","decSlider","raVal","decVal","degToRad","d","Math","PI","sphereCoord","raDeg","decDeg","ra","dec","x","R","cos","y","sin","z","rotateX","point","angleDeg","angle","cosA","sinA","tiltForVantage","pt","rotateY","project3DTo2D","dz","factor","focalLength","center","X","dx","Y","dy","drawLine3D","points","color","beginPath","i","length","p2d","moveTo","lineTo","strokeStyle","lineWidth","stroke","clearRect","drawCelestialGrid","linePoints","push","map","drawEquator","eqPoints","drawEcliptic","eclPoints","pFinal","drawStar","parseFloat","value","textContent","p","star2D","arc","fillStyle","fill"],"version":3,"file":"celestialsphere.2d94ceaf.js.map"}